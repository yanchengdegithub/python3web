/*
Navicat MySQL Data Transfer

Source Server         : 172.22.46.124
Source Server Version : 50720
Source Host           : 172.22.46.124:3306
Source Database       : python3

Target Server Type    : MYSQL
Target Server Version : 50720
File Encoding         : 65001

Date: 2017-11-03 10:27:22
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for Blogs
-- ----------------------------
DROP TABLE IF EXISTS `Blogs`;
CREATE TABLE `Blogs` (
  `id` varchar(50) NOT NULL DEFAULT '',
  `user_id` varchar(50) NOT NULL DEFAULT '' COMMENT '用户id',
  `category_id` int(11) NOT NULL DEFAULT '0' COMMENT '分类id',
  `user_name` varchar(50) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '用户名',
  `user_image` varchar(500) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '用户头像',
  `name` varchar(50) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '文章标题名',
  `summary` varchar(200) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '摘要',
  `content` text CHARACTER SET utf8 NOT NULL COMMENT '内容',
  `read_total` int(11) NOT NULL DEFAULT '0' COMMENT '阅读量',
  `created_at` float NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of Blogs
-- ----------------------------
INSERT INTO `Blogs` VALUES ('001509369547491549beadbaf0543a8ba50d66c5c63c3a9000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', '使用Python virtualenv时如何设置VS code', '用python编程时使用virtualenv隔离项目环境是很普遍的做法，但是用了virtualenv后，使用VS code写python代码会丢失代码提示和代码导航，特别是第三方库', '<p>用python编程时使用virtualenv隔离项目环境是很普遍的做法，但是用了virtualenv后，使用VS code写python代码会丢失代码提示和代码导航，特别是第三方库。</p><p>在VS code装了python插件后的设置项里有一个选项用于配置解释器路径，但是改了这个选项后没有通用性，在别的项目中还需要重新设置。于是Google了一下，找到了解决方法，记录一下免得忘记。</p><ol><li>打开VS code命令面板，mac下快捷键：<code>shift+command+P</code>&nbsp;或者&nbsp;<code>F1</code></li><li>在打开的命令面板里输入或者在&nbsp;<code>quick pick</code>&nbsp;内找到&nbsp;<code>Python: Select Workspace Interpreter</code>&nbsp;这条命令</li><li>执行后会列出自动扫描出的解释器路径，选择你想要的就可以了</li></ol><p>它其实是在你的项目根目录下新建了一个&nbsp;<code>./.vscode/settings.json</code>&nbsp;配置文件，将解释器路径选项写在里面了，该文件称为工作区设置，可以针对每个项目单独设置配置项。当然了你自己手动设置也是没有问题的。</p><p>参考文章：</p><blockquote><p><a href=\"http://stackoverflow.com/questions/37642045/use-virtualenv-with-python-with-visual-studio-code-in-ubuntu\">http://stackoverflow.com/questions/37642045/use-virtualenv-with-python-with-visual-studio-code-in-ubuntu</a></p></blockquote>', '3', '1502370000');
INSERT INTO `Blogs` VALUES ('0015093696871028816b2e1d5444b90acf24f61228ee2ed000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', 'Mac命令行终端下使用shadowsocks翻墙', '配置好shadowsocks服务器端后，安装对应系统的客户端，浏览器安装相应插件就可以翻墙上网了，这都很简单。\n\n问题是对于经常在命令行终端下工作的码农们，SS无法正常工作。因为在终端下不支持socks5代理，只支持http代理，这就很尴尬了。wget、curl、git、brew等命令行工具都会变得很慢', '<p>配置好shadowsocks服务器端后，安装对应系统的客户端，浏览器安装相应插件就可以翻墙上网了，这都很简单。</p><p>问题是对于经常在命令行终端下工作的码农们，SS无法正常工作。因为在终端下不支持socks5代理，只支持http代理，这就很尴尬了。wget、curl、git、brew等命令行工具都会变得很慢。</p><p>Linux系统就简单一些，安装proxychains-NG等软件就可以解决了，但是在Mac下有点麻烦。OS X 10.11之前的系统海好说，都还比较顺利，但是OS X 10.11之后较新的系统默认设置下不会安装成功。</p><p>因为苹果在新系统中加入了SIP安全机制，他会阻止第三方程序向系统目录内（/System，/bin，/sbin，/usr(除了/usr/local)）进行写操作，sudo也不行。办法是先把SIP关了，等装好软件配置好后再打开SIP。或者改用其他软件。</p><p>我懒得去把SIP关了开开了关了，找了另外一个软件privoxy，它刚好就是安装在/usr/local内，不需要关闭SIP也可以正常使用。</p><h3>1、privoxy安装</h3><p>安装很简单用brew安装：</p><div><pre><code>brew install privoxy\n</code></pre></div><h3>2、privoxy配置</h3><p>打开配置文件&nbsp;<code>/usr/local/etc/privoxy/config</code></p><div><pre><code>vim /usr/local/etc/privoxy/config\n</code></pre></div><p>加入下面这两项配置项</p><div><pre><code>listen-address 0.0.0.0:8118\nforward-socks5 / localhost:1080 .\n</code></pre></div><p>第一行设置privoxy监听任意IP地址的8118端口。第二行设置本地socks5代理客户端端口，注意不要忘了最后有一个空格和点号。</p><h3>3、启动privoxy</h3><p>因为没有安装在系统目录内，所以启动的时候需要打全路径。</p><div><pre><code>sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config\n</code></pre></div><h3>4、查看是否启动成功</h3><div><pre><code>netstat -na | grep 8118\n</code></pre></div><p>看到有类似如下信息就表示启动成功了</p><div><pre><code>tcp4       0      0  *.8118                 *.*                    LISTEN\n</code></pre></div><p>如果没有，可以查看日志信息，判断哪里出了问题。打开配置文件找到&nbsp;<code>logdir</code>&nbsp;配置项，查看log文件。</p><h3>5、privoxy使用</h3><p>在命令行终端中输入如下命令后，该终端即可翻墙了。</p><div><pre><code>export http_proxy=\'http://localhost:8118\'\nexport https_proxy=\'http://localhost:8118\'\n</code></pre></div><p>他的原理是讲socks5代理转化成http代理给命令行终端使用。</p><p>如果不想用了取消即可</p><div><pre><code>unset http_proxy\nunset https_proxy\n</code></pre></div><p>如果关闭终端窗口，功能就会失效，如果需要代理一直生效，则可以把上述两行代码添加到 ~/.bash_profile 文件最后。</p><div><pre><code>vim ~/.bash_profile\n-----------------------------------------------------\nexport http_proxy=\'http://localhost:8118\'\nexport https_proxy=\'http://localhost:8118\'\n-----------------------------------------------------\n</code></pre></div><p>使配置立即生效</p><div><pre><code>source  ~/.bash_profile\n</code></pre></div><p>还可以在&nbsp;<code>~/.bash_profile</code>&nbsp;里加入开关函数，使用起来更方便</p><div><pre><code>function proxy_off(){\n    unset http_proxy\n    unset https_proxy\n    echo -e \"已关闭代理\"\n}\n\nfunction proxy_on() {\n    export no_proxy=\"localhost,127.0.0.1,localaddress,.localdomain.com\"\n    export http_proxy=\"http://127.0.0.1:8118\"\n    export https_proxy=$http_proxy\n    echo -e \"已开启代理\"\n}\n</code></pre></div><h3>6、更多设置</h3><p>privoxy更多设置项可以参考这篇文章：</p><blockquote><p><a href=\"http://blog.devtang.com/2012/12/08/use-privoxy/\">使用Privoxy做智能代理切换</a></p></blockquote><h2>参考文章</h2><blockquote><p>1、http://ian.wang/270.htm</p><p>2、http://www.yinqisen.cn/blog-707.html</p></blockquote>', '267', '1502370000');
INSERT INTO `Blogs` VALUES ('001509369726303dac01646ec1e4d71aed7f7885802a379000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', 'CentOS 7下samba服务的简单设置', '近日公司内网服务器需要开samba服务给员工使用，用于图纸管理。暂时先设置两个账号，一个普通账号，一个图纸管理员账号。再设置两个共享目录给两种权限账号使用。', '<p>近日公司内网服务器需要开samba服务给员工使用，用于图纸管理。暂时先设置两个账号，一个普通账号，一个图纸管理员账号。再设置两个共享目录给两种权限账号使用。</p><p>假设两个账号为&nbsp;<code>USER</code>&nbsp;和&nbsp;<code>DWG</code>&nbsp;。两个目录名称为&nbsp;<code>SMBUSER</code>&nbsp;和&nbsp;<code>SMBDWG</code>&nbsp;。</p><h3>1、先建立物理文件夹。</h3><p>公司内网服务器运行网页版图纸管理软件，其图纸预览插件只能读取当前目录及其子目录下的图纸文件，其他目录的文件无法读取，故只能将图纸文件存放在网页根目录下。</p><p>我使用apache，所以存放图纸目录设为&nbsp;<code>/var/www/html/DWG</code>&nbsp;，所以图纸管理员账号可以访问的物理目录即为前面这个 。</p><p>另一个普通账号可以访问的物理目录设为&nbsp;<code>/share/USER</code>&nbsp;。</p><div><pre><code>sudo mkdir /var/www/html/DWG\nsudo mkdir /share/USER\n</code></pre></div><p>然后设置相应的权限，将&nbsp;<code>USER</code>&nbsp;下的文件归属给&nbsp;<code>nobody</code></p><div><pre><code>sudo chown -R nobody:nobody /share/USER\n</code></pre></div><h3>2、设置相应的SElinux权限</h3><div><pre><code>sudo chcon -R -t samba_share_t /share/USER\n</code></pre></div><p>apache的SElinux权限也需要设置，不然无法正常提供图纸管理服务</p><div><pre><code>sudo chcon -R --reference=/var/www/html /var/www/html/DWG\n</code></pre></div><p>通过上面的设置后，<code>/var/www/html/DWG</code>&nbsp;的SElinux文件类型是&nbsp;<code>httpd_sys_content_t</code>&nbsp;，默认samba是不能共享&nbsp;<code>httpd_sys_content_t</code>&nbsp;文件类型的，所以还需要设置samba的SElinux布尔值。</p><div><pre><code>sudo setsebool -P samba_export_all_rw on\n</code></pre></div><h3>3、CentOS 7防火墙设置</h3><p>CentOS 7默认开启了&nbsp;<code>fire-wall</code>&nbsp;防火墙，需要将samba服务端口开放出来</p><div><pre><code>sudo firewall-cmd --permanent --zone=public --add-service=samba\nsudo firewall-cmd --reload\n</code></pre></div><h3>4、设置samba的配置文件</h3><p>打开&nbsp;<code>/etc/samba/smb.conf</code>&nbsp;，修改成如下所示</p><pre><code>[global]\n        workgroup = COM    #工作组名称随意\n        security = user    #需要密码访问\n        server string = Samba Server %v\n\n[SMBUSER]\n        path = /share/USER    #物理目录\n        writable  = yes    #可写\n        browseable = yes    #可浏览\n        guest ok = yes\n\n[SMBDWG]\n        path = /var/www/html/DWG    #物理目录\n        valid users = DWG    #可访问的用户列表，多个用户用逗号分隔\n        write list = DWG    #具有可写权限的用户列表，多个用户用逗号分隔\n        writeable = no    #其余用户不可写\n</code></pre><p>最后重启samba服务就大功告成了</p><div><pre><code>sudo systemctl restart smb\nsudo systemctl restart nmb</code></pre></div>', '678', '1505370000');
INSERT INTO `Blogs` VALUES ('00150936978503764c94138b31c4ba48898e2846247dcbc000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', 'wordpress网站迁移记录', '最近帮公司做企业网站。以前的网站是用asp写的，托管在国内的一家虚拟主机空间上系统是windows。\n\nasp太过古老，而且是windows的系统，所以肯定要把它改成Linux系统的。对于现在的这个企业网站，其日PV不会超过两位数，且网站空间还是用的虚拟主机，所以用Wordpress是最合适不过的了，省时省力。\n\n2年前搞过一段时间的Wordpress，当时都是在windows上做开发，然后也就继', '<p>最近帮公司做企业网站。以前的网站是用asp写的，托管在国内的一家虚拟主机空间上系统是windows。</p><p>asp太过古老，而且是windows的系统，所以肯定要把它改成Linux系统的。对于现在的这个企业网站，其日PV不会超过两位数，且网站空间还是用的虚拟主机，所以用Wordpress是最合适不过的了，省时省力。</p><p>2年前搞过一段时间的Wordpress，当时都是在windows上做开发，然后也就继续在windows上做公司企业网站了。做了段时间，感觉还是在macbook上开发来的舒服，于是就把做了大半的Wordpress网站搬到macbook上。把过程做个记录。</p><p>windows上做Wordpress用的是XAMPP开发环境，换到mac上最简单的办法就是也安装XAMPP/MAMP等集成开发环境，但是mac本身就自带apache+php，所以就不用重复安装了，用自带的就行。</p><p>mac自带的PHP版本是5.6，已经比较高了，没必要装PHP7。虽然PHP7性能很好，但是因为虚拟主机肯定不会提供如此高的版本，估计5.6都悬，所以用自带的版本就可以了。</p><p><strong>1、启动apache服务</strong></p><div><pre><code>sudo apachectl start\n</code></pre></div><p>然后访问http://127.0.0.1，如果浏览器显示&nbsp;<code>It works!</code>&nbsp;即表明apache工作正常。</p><p><strong>2、网站根目录</strong></p><p>Mac系统默认友两个目录作为网站根目录。一个是系统级根目录，一个是用户级根目录。</p><p>系统级根目录为&nbsp;<code>/Library/WebServer/Documents/</code>&nbsp;对应URL是&nbsp;<code>http://127.0.0.1</code></p><p>用户级根目录为&nbsp;<code>~/Sites</code>&nbsp;对应URL是&nbsp;<code>http://127.0.0.1/~USER/</code>&nbsp;(假设USER为你的用户名)。OS X 10.8以上系统默认没有&nbsp;<code>~/Sites</code>&nbsp;需要自己手动建立。</p><p><strong>3、修改配置文件，启用用户级根目录</strong></p><p>apache默认配置使用系统级根目录，若要使用用户级根目录需要修改配置文件。</p><p>在&nbsp;<code>/etc/apache2/users/</code>&nbsp;目录下新建文件&nbsp;<code>USER.conf</code>&nbsp;(USER为你的用户名)，输入以下内容，然后保存退出。</p><div><pre><code>&lt;Directory \"/Users/USER/Sites/\"&gt;\nAllowOverride All\nOptions Indexes MultiViews FollowSymLinks\nRequire all granted\n&lt;/Directory&gt;\n</code></pre></div><p>修改权限，并更改用户</p><div><pre><code>sudo chmod 755 /etc/apache2/users/USER.conf\nsudo chown root:wheel /etc/apache2/users/USER.conf\n</code></pre></div><p>必要时也修改&nbsp;<code>~/Sites</code>&nbsp;的权限为755</p><p><strong>4、重启apache使新配置文件生效</strong></p><div><pre><code>sudo apachectl restart\n</code></pre></div><p>现在应该就可以使用用户级根目录了。在&nbsp;<code>~/Sites</code>&nbsp;下新建一个的文件index.php</p><div><pre><code>&lt;?php\necho phpinfo();\n</code></pre></div><p>然后访问&nbsp;<code>http://127.0.0.1/~USER/</code>&nbsp;，应该就可以看到phpinfo的输出信息了。如果看不到输出信息，则需要修改&nbsp;<code>httpd.conf</code>&nbsp;配置文件。</p><p><strong>5、修改&nbsp;<code>httpd.conf</code>&nbsp;配置文件</strong></p><p>打开&nbsp;<code>httpd.conf</code></p><div><pre><code>cd  /etc/apache2/\nsudo vi httpd.conf\n</code></pre></div><p>找到下面几行配置，去掉注释，即去掉每行开头的&nbsp;<code>#</code>&nbsp;，已经去掉注释的话就不用管了。</p><div><pre><code>LoadModule php5_module libexec/apache2/libphp5.so\nLoadModule authz_core_module libexec/apache2/mod_authz_core.so\nLoadModule authz_host_module libexec/apache2/mod_authz_host.so\nLoadModule userdir_module libexec/apache2/mod_userdir.so\nInclude /private/etc/apache2/extra/httpd-userdir.conf\n</code></pre></div><p>打开配置文件&nbsp;<code>/etc/apache2/extra/httpd-userdir.conf</code></p><div><pre><code>sudo vi /etc/apache2/extra/httpd-userdir.conf\n</code></pre></div><p>找到以下配置，去掉注释</p><div><pre><code>Include /private/etc/apache2/users/*.conf\n</code></pre></div><p>此时再重启apache服务就可以正常访问&nbsp;<code>http://127.0.0.1/~USER/</code>&nbsp;了。</p><p>mysql之前已经安装过了，这里就不用安装配置了。</p><p><strong>6、为了方便再安装一个phpmyadmin</strong></p><p>去官网下载程序包，然后解压至&nbsp;<code>~/Sites</code>&nbsp;目录下，并将解压出来的文件夹改名为&nbsp;<code>phpMyAdmin</code>&nbsp;。然后在&nbsp;<code>phpMyAdmin</code>&nbsp;目录下新建一个&nbsp;<code>config</code>&nbsp;目录，并修改权限</p><div><pre><code>chmod o+w ~/Sites/phpmyadmin/config\n</code></pre></div><p>之后就可以从浏览器中访问phpmyadmin的初始设置页面了:&nbsp;<code>http://127.0.0.1/~USER/phpmyadmin/setup/</code></p><p>如果出现2002 socket错误的话，执行如下shell命令</p><div><pre><code>sudo mkdir /var/mysql\nsudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock\n</code></pre></div><p>打开页面之后，点击”New server”，在 Basic settings 页面确保 Serverhostname 是 localhost，在 Authentication 配置好登陆用户名和密码，点击保存就可以了。</p><p>在你点击保存后，在刚才建立的&nbsp;<code>config</code>&nbsp;目录下会生成一个&nbsp;<code>config.inc.php</code>&nbsp;文件。将之移动到上一层目录，即&nbsp;<code>phpMyAdmin</code>&nbsp;目录下。</p><p>这样就将phpmyadmin安装好了。为了安全起见将刚才建立的&nbsp;<code>config</code>&nbsp;目录删除。以后就可以通过&nbsp;<code>http://127.0.0.1/~USER/phpmyadmin/</code>&nbsp;来访问phpmyadmin了。</p><p><strong>7、迁移Wordpress程序文件</strong></p><p>将windows上的整个Wordpress文件夹打包移动到&nbsp;<code>~/Sites</code>&nbsp;目录下即可，假设原Wordpress站点文目录名为&nbsp;<code>wp</code>。最后设置完成后访问&nbsp;<code>http://127.0.0.1/~USER/wp/</code>&nbsp;就可以打开原Wordpress网站了，原来的设置、插件等都可以完整保留。</p><p><strong>8、迁移Wordpress数据库</strong></p><p>在原来的windows上用phpmyadmin导出Wordpress的数据库，假设导出的数据库文件为&nbsp;<code>wp.sql</code>。</p><p>然后在mac上利用phpmyadmin或者mysql命令行客户端新建一个数据库，并且最好与原Wordpress数据库同名。再在这个数据库内导入刚才得到的文件<code>wp.sql</code>。注意文件编码需要保持一致，否则会产生乱码。</p><p><strong>9、修复数据库中的站点地址及图片地址</strong></p><p>由于Wordpress中都是采用绝对地址定位的，所以需要修复数据库中的站点地址及图片地址。在修复之前先不要尝试打开站点。</p><p>在phpmyadmin里打开Wordpress数据库，点击&nbsp;<code>SQL</code>&nbsp;选项卡，输入以下sql语句</p><div><pre><code>UPDATE wp_options SET option_value = replace(option_value,\'http://127.0.0.1/wp/\',\'http://127.0.0.1/~USER/wp/\') WHERE option_name =\'home\' OR option_name=\'siteurl\';\nUPDATE wp_posts SET guid = REPLACE(guid,\'http://127.0.0.1/wp/\',\'http://127.0.0.1/~USER/wp/\');\nUPDATE wp_posts SET post_content = REPLACE(post_content,\'http://127.0.0.1/wp/\',\'http://127.0.0.1/~USER/wp/\');\n</code></pre></div><p>其中&nbsp;<code>http://127.0.0.1/wp/</code>&nbsp;为原windows上的Wordpress站点地址，<code>http://127.0.0.1/~USER/wp/</code>&nbsp;为mac上新站点地址。</p><p><strong>10、修改Wordpress配置文件</strong></p><p>最后我们还需要修改Wordpress配置文件，使之与我们刚才导入的Wordpress数据库关联才行。</p><p>打开&nbsp;<code>~/Sites/wp</code>&nbsp;目录下的&nbsp;<code>wp-config.php</code>&nbsp;配置文件，修改与数据库相关的那几项就可以了，主要就是下面几项</p><div><pre><code>// ** MySQL settings - You can get this info from your web host ** //\n/** The name of the database for WordPress */\ndefine(\'DB_NAME\', \'wp\');\n\n/** MySQL database username */\ndefine(\'DB_USER\', \'root\');\n\n/** MySQL database password */\ndefine(\'DB_PASSWORD\', \'root\');\n</code></pre></div><p><code>DB_NAME</code>&nbsp;是数据库名，<code>DB_USER</code>&nbsp;是用户名，<code>DB_PASSWORD</code>&nbsp;是密码。修改成相应值即可。</p><p><strong>11、修改apache启动权限</strong></p><p>如果在使用Wordpress的过程中遇到权限问题，例如升级的时候，可以修改apache的启动权限。</p><p>打开&nbsp;<code>httpd.conf</code>&nbsp;找到下面的内容</p><div><pre><code>User _www\nGroup _www\n</code></pre></div><p>改成以下内容</p><div><pre><code>User USER\nGroup staff\n</code></pre></div><p>其中&nbsp;<code>USER</code>&nbsp;为你的用户名。</p><p>至此，整个迁移过程就算结束了。写写很多字，其实实际操作的话也就半小时就可以了，过程并不复杂。</p>', '224', '1509370000');
INSERT INTO `Blogs` VALUES ('00150936982061134e40113f8cb49bcac582b7472fc34ad000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', 'nginx无法获取静态资源', '我的博客网站使用nginx作为服务器，图片、JS、CSS等静态资源直接交给nginx处理，其余动态资源用反向代理转发给后台自己写的python博客程序处理。 修改/etc/nginx/conf.d/default.conf默认配置文件如下，假设网站根目录为/home/USER/WEB。', '<p>我的博客网站使用nginx作为服务器，图片、JS、CSS等静态资源直接交给nginx处理，其余动态资源用反向代理转发给后台自己写的python博客程序处理。 修改<code>/etc/nginx/conf.d/default.conf</code>默认配置文件如下，假设网站根目录为<code>/home/USER/WEB</code>。</p><div><pre><code>server {\n    listen       80;\n    server_name  localhost cashqian.net www.cashqian.net;\n\n    root         /home/USER/WEB;\n    access_log   /home/USER/WEB/log/access_log;\n    error_log    /home/USER/WEB/log/error_log;\n\n    # 防止外链\n    location ~ ^/static/upload/ {\n        valid_referers none blocked cashqian.net www.cashqian.net ~\\.google\\. ~\\.baidu\\.;\n        if ($invalid_referer) { return 404; }\n        root /home/USER/WEB;\n    }\n\n    # 处理静态文件\n    location ~ ^/static/ {\n        root /home/USER/WEB;\n    }\n\n    # 处理动态文件\n    location / {\n        proxy_pass       http://127.0.0.1:9000;  # 这是自己写的python博客程序监听的地址和端口\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n\n    #error_page  404              /404.html;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\n</code></pre></div><p>以上配置文件都没什么好说的，网上都有很多介绍了，理论上这个配置文件是没有问题的。但是实际访问网站的时候，静态文件总是获取不到。查了很多资料都没有帮助。</p><p>然后在<a href=\"http://ngcsnow.iteye.com/blog/2117975\">这篇文章</a>里提到了权限问题，顿时恍然大悟。</p><p>查看error_log文件，里面对静态文件的访问日志确实是说Permission denied。遂打开<code>/etc/nginx/nginx.conf</code>nginx的最上层默认配置文件，第一行就是如下语句</p><div><pre><code>user nginx\n</code></pre></div><p>他的意思就是以<code>nginx</code>用户运行nginx。显然是不对的，我的VPS上根本没有<code>nginx</code>这个用户。于是将其改成<code>/home/USER/WEB</code>的拥有者用户。保存退出，重启nginx。网站终于正常了~~~。</p><p>在这里吸取的教训就是在linux下操作，一定要时刻注意文件权限，否则怎么死的都不知道。</p>', '1001', '1509370000');
INSERT INTO `Blogs` VALUES ('001509369866574b77a0eef0ab44ac1b83b16a17f0ac0f1000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', 'Git 忽略文件不提交到版本库', '最近在学习使用git，在自己的项目里也开始使用了。其中有一个十分有用的文件： .gitignore ，其作用是忽略那些你不想提交到版本库里的文件，例如含有密码的本地文件，编译器或者IDE生成的中间文件等。', '<p>最近在学习使用git，在自己的项目里也开始使用了。其中有一个十分有用的文件：&nbsp;<code>.gitignore</code>&nbsp;，其作用是忽略那些你不想提交到版本库里的文件，例如含有密码的本地文件，编译器或者IDE生成的中间文件等。</p><p>具体&nbsp;<code>.gitignore</code>&nbsp;怎么写，官方文档里已经写的很清楚了，一行一个忽略规则，可以使用<code>*</code>,<code>?</code>等通配符。</p><p>其实不用自己从头开始写，在这里<a href=\"https://github.com/github/gitignore\">https://github.com/github/gitignore</a>已经有前人写好了绝大多数使用场合下的&nbsp;<code>.gitignore</code>&nbsp;文件，我们只要拿过来自己稍加修改一下就可以了。</p><p>这里说一些需要特别注意的地方。</p><p>1、由于git不会加入空目录，所以下面做法会导致tmp不会存在</p><div><pre><code># 忽略tmp文件夹所有文件\ntmp/*\n</code></pre></div><p>改为以下方法，在tmp下也加一个&nbsp;<code>.gitignore</code>&nbsp;文件，内容为：</p><div><pre><code>*\n!.gitignore\n</code></pre></div><p>2、已经commit了的文件，再加入&nbsp;<code>.gitignore</code>&nbsp;文件想要忽略他是无效的，需要删除缓存：</p><div><pre><code>git rm -r --cached ignore_file\n</code></pre></div><p>原因是&nbsp;<code>.gitignore</code>&nbsp;文件只能作用于<strong>Untracked</strong>文件，也就是那些从来没有被 Git 记录过的文件（自添加以后，从未 add 及 commit 过的文件）。</p><p>所以正确的顺序应该是：</p><ol><li>从 Git 的数据库中删除对于该文件的追踪。</li><li>把对应的规则写入&nbsp;<code>.gitignore</code>&nbsp;文件，让忽略真正生效。</li><li>提交＋推送。</li></ol><p>最后需要注意的是，<code>git rm --cached</code>&nbsp;删除的是追踪状态，而不是物理文件。</p><p>3、&nbsp;<code>.gitignore</code>&nbsp;文件还有个特殊用途。 一个空的&nbsp;<code>.gitignore</code>&nbsp;文件可以当作是一个placeholder 。</p><p>当你需要为项目创建一个空的 log 目录时， 这就变的很有用。 你可以创建一个 log 目录，在里面放置一个空的&nbsp;<code>.gitignore</code>&nbsp;文件。这样当你 clone 这个 repo 的时候 git 会自动的创建好一个空的 log 目录了。</p><p>本文参考了以下内容：</p><blockquote><p>http://blog.csdn.net/xmyzlz/article/details/8592302</p><p>https://segmentfault.com/q/1010000000430426</p></blockquote>', '786', '1509370000');
INSERT INTO `Blogs` VALUES ('0015093699071095da7255598d44cce8024617c0a9bdb50000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', '利用git hook自动化部署程序遇到的问题', '利用git hook功能自动化部署程序在网上已经有很多文章介绍过了，简述如下：\n\n在服务器上建立一个远程中转裸仓库，假设路径为 ~/repos ，仓库名为 WEBAPP 。\n\ngit init --bare WEBAPP.git\n再切换到部署目录，假设为 ~/www 。 git init git remote add origin ~/repos/WEBAPP', '<p>利用git hook功能自动化部署程序在网上已经有很多文章介绍过了，简述如下：</p><p>在服务器上建立一个远程中转裸仓库，假设路径为&nbsp;<code>~/repos</code>&nbsp;，仓库名为&nbsp;<code>WEBAPP</code>&nbsp;。</p><div><pre><code>git init --bare WEBAPP.git\n</code></pre></div><p>再切换到部署目录，假设为&nbsp;<code>~/WEBAPP</code>&nbsp;。</p><div><pre><code>git init\ngit remote add origin ~/repos/WEBAPP.git\ngit pull origin master\n</code></pre></div><p>切换到目录&nbsp;<code>~/repos/WEBAPP.git/hooks</code>&nbsp;，编辑&nbsp;<code>post-receive</code>&nbsp;文件内容，加入部署shell脚本，大致如下：</p><div><pre><code>#!/bin/sh\n\nunset GIT_DIR\n\nNowPath=`pwd`\necho \"Now path is :\"$NowPath\nDeployPath=\"/home/USER/WEBAPP\" # 使用绝对路径\n\necho \"Deploy path is :\"$DeployPath\ncd $DeployPath\necho \"cd deploy path\"\ngit add . -A &amp;&amp; git stash # 丢弃所有的本地更改，这条可以看情况使用\ngit pull origin master\necho \"Deploy done\"\n\ncd $NowPath\necho \"Restart WEBAPP\"\necho \"PASSWORD\" | sudo -S supervisorctl stop WEBAPP\necho \"PASSWORD\" | sudo -S supervisorctl start WEBAPP\necho \"Finish\"\nexit 0\n</code></pre></div><p>使用&nbsp;<code>chmod +x post-receive</code>&nbsp;加入可执行权限后，服务器端的配置就基本完成了。</p><p>在本地代码仓库加入remote地址</p><div><pre><code>git remote add prod USER@SEVER:~/repos/WEBAPP.git\n</code></pre></div><p>然后在部署的时候只需要&nbsp;<code>git push prod master</code>&nbsp;，就可以了。</p><p>我的应用使用supervisor来管理，所以在脚本最后加入了重启相关应用的代码，但是执行supervisor需要提权，所以使用<code>sudo</code>命令。</p><p>从这里开始坑就出现了，首先单单使用<code>sudo</code>的话，在本地push时系统提示：</p><div><pre><code>sudo：抱歉，您必须拥有一个终端来执行 sudo\n</code></pre></div><p>google之后发现需要编辑&nbsp;<code>/etc/sudoers</code>&nbsp;文件，在该文件中将&nbsp;<code>Default requiretty</code>&nbsp;注释掉。 注意编辑&nbsp;<code>/etc/sudoers</code>&nbsp;文件需要使用&nbsp;<code>visudo</code>&nbsp;命令。</p><p>之后他又提示：</p><div><pre><code>sudo：没有终端存在，且未指定 askpass 程序\n</code></pre></div><p>然后再Google，发现有人说需要在<code>sudo</code>之后加上<code>-S</code>参数，会在终端提示用户输入密码。</p><p>加上之后，在终端提示你输入密码时一晃而过，根本没时间给你输入密码。。。 之后又试了很多方法都未果，最后只好将密码写在shell脚本里，用管道传给sudo，于是就成了以上可见的最终版脚本了。</p><p>为了安全起见，修改<code>post-receive</code>的权限，只允许拥有者有读写执行的权限。</p><div><pre><code>chmod 700 post-receive\n</code></pre></div><p>至此配置自动部署终于告一段落了。</p>', '596', '1509370000');
INSERT INTO `Blogs` VALUES ('00150937001195405f181a7696e4ee9a953f0e70f22cfa9000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '2', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', '关于本站', '这是一个用python3写的个人博客网站，基于aiohttp第三方库，该库使用了python3异步模型。网站前台展示页面采用传统的服务器后端渲染页面方式展现，以利于SEO。而网站后台管理页面因没有SEO要求，故采用单页应用形式。首次载入后其他操作无需重载整个页面，提高了用户使用感受。', '<p>这是一个用python3写的个人博客网站，基于aiohttp第三方库，该库使用了python3异步模型。网站前台展示页面采用传统的服务器后端渲染页面方式展现，以利于SEO。而网站后台管理页面因没有SEO要求，故采用单页应用形式。首次载入后其他操作无需重载整个页面，提高了用户使用感受。</p><p>这里用来记录我学习编程过程中的日常点滴，代码托管在<a target=\"_blank\" href=\"https://github.com/qqj1228/Python_Blog\">Github</a>上，欢迎大家来交流。</p><p>本站的评论系统采用Disqus，国内用户可能需要翻墙才能使用。</p><p>本站已经开放网站后台管理页面，注册用户可以进行浏览，但是涉及到数据库修改操作的话还是需要管理员权限。</p><h2>打个广告</h2><p>本站空间提供商使用的是Digital Ocean，性价比不错，San Francisco节点的VPS国内访问速度尚可，有兴趣的同学可以通过以下链接注册试用。</p><p><a target=\"_blank\" href=\"https://m.do.co/c/5bed760ea510\">https://m.do.co/c/5bed760ea510</a></p><p>通过以上链接注册试用的话可以便宜10美刀，我也可以可到回馈，一举两得。照例他也是支持30天退款的，大家可以放心试用。</p><h2>开发日志</h2><h3>2016-10-6</h3><ul><li>在用户信息页面内加入修改密码功能</li><li>在登录页面内加入一直未实现的“忘记密码”功能</li></ul><h3>2016-9-15</h3><ul><li>将网站后台管理页面统一成单页应用形式，除了文章编辑和分类编辑两个页面外，其余操作均无需重载整个页面</li><li>修正了“非管理员注册用户浏览后台管理页面”选项的逻辑错误</li><li>增加findAll函数的功能，现在可以指定仅获取某几个字段的数据，而不像以前只能获取全部字段的数据无法更改</li></ul><h3>2016-9-10</h3><ul><li>在文章编辑页面加入可以预览以前上传的图片功能</li><li>在文章编辑页面加入预览功能，可以预览发布后的文章内容，使用后端python代码转换markdown，保证预览结果和发布结果的一致性</li></ul><h3>2016-9-8</h3><ul><li>加入是否可以让“非管理员注册用户浏览后台管理页面”的选项，供演示后台管理页面功能，该选项默认关闭</li></ul><h3>2016-8-22</h3><ul><li>修改了页面样式，看起来不会太刺眼</li><li>修正了offcanvas不会自动设置导航栏选中样式</li></ul><h3>2016-8-19</h3><ul><li>修改导航栏样式为通栏以及暗色效果</li></ul><h3>2016-8-17</h3><ul><li>加入文章阅读量显示</li></ul><h3>2016-8-16</h3><ul><li>修正pygments的暗色主题monokai的代码着色bug，现在代码块已经使用monokai主题了</li></ul><h3>2016-8-14</h3><ul><li>加入缺失的about页面</li><li>加入代码语法高亮，使用markdown2的“fenced-code-blocks”扩展来实现。其是在后台调用pygments实现功能的。本人比较喜欢monokai主题（sublime的默认主题）但是pygments的暗色主题有bug，某些代码会和背景色混在一起，故目前只能先使用浅色主题</li></ul><h3>2016-8-13</h3><ul><li>在网站页面里加入回到顶部功能</li><li>提交文章摘要时监测长度不能大于200个字符</li></ul><h3>2016-8-11</h3><ul><li>网站代码按照PEP8要求规范化。</li></ul><h3>2016-8-9</h3><ul><li>加入文章评论数显示功能。</li></ul><h3>2016-8-6</h3><ul><li>网站初版上线，代码基于<a target=\"_blank\" href=\"http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432170876125c96f6cc10717484baea0c6da9bee2be4000\">廖雪峰的python3教程实战内容</a>做了一些修改并扩充了以下功能：<ul><li>文章分类功能</li><li>本地评论管理中可以直接跳转到相应评论处</li><li>用户信息页面</li><li>图片上传功能</li><li>可选使用Disqus评论系统</li><li>使用JSON格式配置文件，并支持注释</li><li>完善程序退出机制，手工退出不会报错</li></ul></li></ul>', '3', '1509370000');

-- ----------------------------
-- Table structure for Category
-- ----------------------------
DROP TABLE IF EXISTS `Category`;
CREATE TABLE `Category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '分类名称',
  `p_id` int(11) NOT NULL DEFAULT '0' COMMENT '父级分类id',
  `path_id` varchar(255) NOT NULL DEFAULT '' COMMENT '层级路径',
  `orders` int(11) NOT NULL DEFAULT '0' COMMENT '顺序',
  `user_id` varchar(50) DEFAULT '' COMMENT '创建者id',
  `created_at` float NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of Category
-- ----------------------------
INSERT INTO `Category` VALUES ('1', '最新文章', '0', '/', '0', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '0');
INSERT INTO `Category` VALUES ('2', '关于本站', '0', '/', '0', '0015093681473617388bd93fa814b49bd613f499ddd2470000', '0');

-- ----------------------------
-- Table structure for Comments
-- ----------------------------
DROP TABLE IF EXISTS `Comments`;
CREATE TABLE `Comments` (
  `id` varchar(50) NOT NULL DEFAULT '',
  `blog_id` varchar(50) NOT NULL DEFAULT '' COMMENT '文章id',
  `user_id` varchar(50) NOT NULL DEFAULT '' COMMENT '用户id',
  `user_name` varchar(50) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '用户名称',
  `user_image` varchar(500) NOT NULL DEFAULT '' COMMENT '用户头像',
  `content` text CHARACTER SET utf8 NOT NULL COMMENT '评论内容',
  `created_at` float(11,0) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of Comments
-- ----------------------------
INSERT INTO `Comments` VALUES ('00150937023180990e8f11a989d40cfbaa7b5e4215d99f2000', '0015093699071095da7255598d44cce8024617c0a9bdb50000', '0015093681473617388bd93fa814b49bd613f499ddd2470000', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', '我说点什么好呢？', '1509370240');

-- ----------------------------
-- Table structure for Users
-- ----------------------------
DROP TABLE IF EXISTS `Users`;
CREATE TABLE `Users` (
  `id` varchar(50) NOT NULL DEFAULT '',
  `email` varchar(50) NOT NULL DEFAULT '' COMMENT '邮箱',
  `passwd` varchar(50) NOT NULL DEFAULT '' COMMENT '密码',
  `admin` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否是管理员',
  `name` varchar(50) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '名称',
  `image` varchar(500) NOT NULL DEFAULT '' COMMENT '头像',
  `created_at` float(11,0) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Records of Users
-- ----------------------------
INSERT INTO `Users` VALUES ('0015093681473617388bd93fa814b49bd613f499ddd2470000', 'yancheng@infogo.com.cn', '5812a09a79362d77f55dfd800baaf4feb60eeb7d', '1', 'yancheng', '/static/img/my_img.jpg?cache=4963a70ecb081c55ea3fec148000a2a2', '1509368192');
